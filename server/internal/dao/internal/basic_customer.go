// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// BasicCustomerDao is the data access object for table hg_basic_customer.
type BasicCustomerDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns BasicCustomerColumns // columns contains all the column names of Table for convenient usage.
}

// BasicCustomerColumns defines and stores column names for table hg_basic_customer.
type BasicCustomerColumns struct {
	Id          string // 客户ID
	Type        string // 客户类别-字典
	Name        string // 客户名称
	Zjf         string // 助记符
	Addr        string // 客户地址
	Source      string // 客户来源
	Supply      string // 即是客户又是供应商
	Account     string // 客户账户
	Certificate string // 客户身份号码
	Code        string // 客户编码
	ViteCode    string // 邀请码
	Description string // 描述
	Username    string // 对账账号
	Password    string // 对账密码
	CreatedAt   string // 创建时间
	UpdatedAt   string // 更新时间
	CreatedById string // 创建用户的id
	UpdatedById string // 更新用户的id
	Status      string // 客户状态
	Contacts    string // 联系人
	Deleted     string // 是否删除
	City        string // 城市代码
}

// basicCustomerColumns holds the columns for table hg_basic_customer.
var basicCustomerColumns = BasicCustomerColumns{
	Id:          "id",
	Type:        "type",
	Name:        "name",
	Zjf:         "zjf",
	Addr:        "addr",
	Source:      "source",
	Supply:      "supply",
	Account:     "account",
	Certificate: "certificate",
	Code:        "code",
	ViteCode:    "vite_code",
	Description: "description",
	Username:    "username",
	Password:    "password",
	CreatedAt:   "createdAt",
	UpdatedAt:   "updatedAt",
	CreatedById: "createdById",
	UpdatedById: "updatedById",
	Status:      "status",
	Contacts:    "contacts",
	Deleted:     "deleted",
	City:        "city",
}

// NewBasicCustomerDao creates and returns a new DAO object for table data access.
func NewBasicCustomerDao() *BasicCustomerDao {
	return &BasicCustomerDao{
		group:   "default",
		table:   "hg_basic_customer",
		columns: basicCustomerColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BasicCustomerDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *BasicCustomerDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *BasicCustomerDao) Columns() BasicCustomerColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *BasicCustomerDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BasicCustomerDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BasicCustomerDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
